package _250902_DP;

/**
 * 삼각형의 크기가 크기 때문에 계속 내려가며 연산하는 방식은 불가능하다.
 * 
 * 일단 배열을 만든다. 처음 받게되는 nxn사이즈의 배열을 만들고, 입력값을 넣고 값이 없는 부분은 -1로 초기화한다.
 * 현재 내 x인덱스에서 아래로 이동했을 때 갈수 있는 곳은 x or x+1이다.
 * 
 * 느낌상 내려가면서 현재 위치까지의 최댓값을 계속해서 갱신해야 할 것으로 보인다. 전에 배웠던 누적합? 응용처럼 보이기도 한다.
 * 누적합을 저장할 nxn사이즈의 배열을 만들고 전부 0으로 초기화한다.
 * bfs를 활용할 것이기에 queue를 하나 생성하고 초기 인덱스 (y,x) -> (0,0)을 넣는다. 동시에 누적합[] 해당 인덱스에 board[]값을 넣어놓는다.
 * 
 * 큐에서 값을 뺀다. 갈수 있는 두 좌표 (y-1, x) (y-1, x+1)를 큐에 넣을 예정이다.
 * 그 전에 누적합 배열을 갱신해야 하는데 기존 누적합 값과 현재 새롭게 계산한 값을 비교해서 더 큰 값을 채워넣으면 된다.
 */

public class _02_02_1932_정수삼각형_BOJ {

	public static void main(String[] args) {
	

	}

}
